{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","terraformFunctions","terraformMainBlocks","tokenizer","root","include","terraform","cases","token","heredoc","next","heredocBody","whitespace","comment","string","stringInsideExpression","stringExpression"],"mappings":"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","file":"hcl.c6063c86.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.hcl',\n    keywords: [\n        'var',\n        'local',\n        'path',\n        'for_each',\n        'any',\n        'string',\n        'number',\n        'bool',\n        'true',\n        'false',\n        'null',\n        'if ',\n        'else ',\n        'endif ',\n        'for ',\n        'in',\n        'endfor'\n    ],\n    operators: [\n        '=',\n        '>=',\n        '<=',\n        '==',\n        '!=',\n        '+',\n        '-',\n        '*',\n        '/',\n        '%',\n        '&&',\n        '||',\n        '!',\n        '<',\n        '>',\n        '?',\n        '...',\n        ':'\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n    terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n    tokenizer: {\n        root: [\n            // highlight main blocks\n            [\n                /^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n                ['type', '', 'string', '', 'string', '', '@brackets']\n            ],\n            // highlight all the remaining blocks\n            [\n                /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n                ['identifier', '', 'string', '', 'string', '', '@brackets']\n            ],\n            // highlight block\n            [\n                /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/,\n                ['identifier', '', 'string', '', 'operator', '', '@brackets']\n            ],\n            // terraform general highlight - shared with expressions\n            { include: '@terraform' }\n        ],\n        terraform: [\n            // highlight terraform functions\n            [/@terraformFunctions(\\()/, ['type', '@brackets']],\n            // all other words are variables or keywords\n            [\n                /[a-zA-Z_]\\w*-*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'variable'\n                    }\n                }\n            ],\n            { include: '@whitespace' },\n            { include: '@heredoc' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'operator',\n                        '@default': ''\n                    }\n                }\n            ],\n            // numbers\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/\\d[\\d']*/, 'number'],\n            [/\\d/, 'number'],\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"/, 'string', '@string'],\n            [/'/, 'invalid']\n        ],\n        heredoc: [\n            [\n                /<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/,\n                { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' }\n            ]\n        ],\n        heredocBody: [\n            [\n                /^([\\w\\-]+)$/,\n                {\n                    cases: {\n                        '$1==$S2': [\n                            {\n                                token: 'string.heredoc.delimiter',\n                                next: '@popall'\n                            }\n                        ],\n                        '@default': 'string.heredoc'\n                    }\n                }\n            ],\n            [/./, 'string.heredoc']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n            [/#.*$/, 'comment']\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/\\$\\{/, { token: 'delimiter', next: '@stringExpression' }],\n            [/[^\\\\\"\\$]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@popall']\n        ],\n        stringInsideExpression: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        stringExpression: [\n            [/\\}/, { token: 'delimiter', next: '@pop' }],\n            [/\"/, 'string', '@stringInsideExpression'],\n            { include: '@terraform' }\n        ]\n    }\n};\n"]}