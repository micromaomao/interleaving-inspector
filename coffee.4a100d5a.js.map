{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"names":["conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","next","string","herestring","comment","hereregexp"],"mappings":"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","file":"coffee.4a100d5a.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        blockComment: ['###', '###'],\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*#region\\\\b'),\n            end: new RegExp('^\\\\s*#endregion\\\\b')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.coffee',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n    keywords: [\n        'and',\n        'or',\n        'is',\n        'isnt',\n        'not',\n        'on',\n        'yes',\n        '@',\n        'no',\n        'off',\n        'true',\n        'false',\n        'null',\n        'this',\n        'new',\n        'delete',\n        'typeof',\n        'in',\n        'instanceof',\n        'return',\n        'throw',\n        'break',\n        'continue',\n        'debugger',\n        'if',\n        'else',\n        'switch',\n        'for',\n        'while',\n        'do',\n        'try',\n        'catch',\n        'finally',\n        'class',\n        'extends',\n        'super',\n        'undefined',\n        'then',\n        'unless',\n        'until',\n        'loop',\n        'of',\n        'by',\n        'when'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        this: 'variable.predefined',\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': ''\n                    }\n                }\n            ],\n            // whitespace\n            [/[ \\t\\r\\n]+/, ''],\n            // Comments\n            [/###/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n            // regular expressions\n            ['///', { token: 'regexp', next: '@hereregexp' }],\n            [/^(\\s*)(@regEx)/, ['', 'regexp']],\n            [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n            [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n            [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n            [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n            [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\n            // delimiters\n            [\n                /}/,\n                {\n                    cases: {\n                        '$S2==interpolatedstring': {\n                            token: 'string',\n                            next: '@pop'\n                        },\n                        '@default': '@brackets'\n                    }\n                }\n            ],\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/0[0-7]+(?!\\d)/, 'number.octal'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[,.]/, 'delimiter'],\n            // strings:\n            [/\"\"\"/, 'string', '@herestring.\"\"\"'],\n            [/'''/, 'string', \"@herestring.'''\"],\n            [\n                /\"/,\n                {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: '@string.\"' }\n                    }\n                }\n            ],\n            [\n                /'/,\n                {\n                    cases: {\n                        '@eos': 'string',\n                        '@default': { token: 'string', next: \"@string.'\" }\n                    }\n                }\n            ]\n        ],\n        string: [\n            [/[^\"'\\#\\\\]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\./, 'string.escape.invalid'],\n            [/\\./, 'string.escape.invalid'],\n            [\n                /#{/,\n                {\n                    cases: {\n                        '$S2==\"': {\n                            token: 'string',\n                            next: 'root.interpolatedstring'\n                        },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [\n                /[\"']/,\n                {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [/#/, 'string']\n        ],\n        herestring: [\n            [\n                /(\"\"\"|''')/,\n                {\n                    cases: {\n                        '$1==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }\n            ],\n            [/[^#\\\\'\"]+/, 'string'],\n            [/['\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\./, 'string.escape.invalid'],\n            [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n            [/#/, 'string']\n        ],\n        comment: [\n            [/[^#]+/, 'comment'],\n            [/###/, 'comment', '@pop'],\n            [/#/, 'comment']\n        ],\n        hereregexp: [\n            [/[^\\\\\\/#]+/, 'regexp'],\n            [/\\\\./, 'regexp'],\n            [/#.*$/, 'comment'],\n            ['///[igm]*', { token: 'regexp', next: '@pop' }],\n            [/\\//, 'regexp']\n        ]\n    }\n};\n"]}