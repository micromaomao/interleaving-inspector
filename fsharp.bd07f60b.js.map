{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/fsharp/fsharp.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","token","include","next","whitespace","comment","string","litstring"],"mappings":"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","file":"fsharp.bd07f60b.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['(*', '*)']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)'),\n            end: new RegExp('^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.fs',\n    keywords: [\n        'abstract',\n        'and',\n        'atomic',\n        'as',\n        'assert',\n        'asr',\n        'base',\n        'begin',\n        'break',\n        'checked',\n        'component',\n        'const',\n        'constraint',\n        'constructor',\n        'continue',\n        'class',\n        'default',\n        'delegate',\n        'do',\n        'done',\n        'downcast',\n        'downto',\n        'elif',\n        'else',\n        'end',\n        'exception',\n        'eager',\n        'event',\n        'external',\n        'extern',\n        'false',\n        'finally',\n        'for',\n        'fun',\n        'function',\n        'fixed',\n        'functor',\n        'global',\n        'if',\n        'in',\n        'include',\n        'inherit',\n        'inline',\n        'interface',\n        'internal',\n        'land',\n        'lor',\n        'lsl',\n        'lsr',\n        'lxor',\n        'lazy',\n        'let',\n        'match',\n        'member',\n        'mod',\n        'module',\n        'mutable',\n        'namespace',\n        'method',\n        'mixin',\n        'new',\n        'not',\n        'null',\n        'of',\n        'open',\n        'or',\n        'object',\n        'override',\n        'private',\n        'parallel',\n        'process',\n        'protected',\n        'pure',\n        'public',\n        'rec',\n        'return',\n        'static',\n        'sealed',\n        'struct',\n        'sig',\n        'then',\n        'to',\n        'true',\n        'tailcall',\n        'trait',\n        'try',\n        'type',\n        'upcast',\n        'use',\n        'val',\n        'void',\n        'virtual',\n        'volatile',\n        'when',\n        'while',\n        'with',\n        'yield'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    integersuffix: /[uU]?[yslnLI]?/,\n    floatsuffix: /[fFmM]?/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // [< attributes >].\n            [/\\[<.*>\\]/, 'annotation'],\n            // Preprocessor directive\n            [/^#(if|else|endif)/, 'keyword'],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n            [/0x[0-9a-fA-F]+LF/, 'number.float'],\n            [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\n            [/0b[0-1]+(@integersuffix)/, 'number.bin'],\n            [/\\d+(@integersuffix)/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"\"\"/, 'string', '@string.\"\"\"'],\n            [/\"/, 'string', '@string.\"'],\n            // literal string\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\n            // characters\n            [/'[^\\\\']'B?/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\(\\*(?!\\))/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ],\n        comment: [\n            [/[^*(]+/, 'comment'],\n            [/\\*\\)/, 'comment', '@pop'],\n            [/\\*/, 'comment'],\n            [/\\(\\*\\)/, 'comment'],\n            [/\\(/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [\n                /(\"\"\"|\"B?)/,\n                {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }\n            ]\n        ],\n        litstring: [\n            [/[^\"]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ]\n    }\n};\n"]}