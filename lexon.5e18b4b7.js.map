{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"mappings":"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","file":"lexon.5e18b4b7.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: 'COMMENT'\n        // blockComment: ['COMMENT', '.'],\n    },\n    brackets: [['(', ')']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: ':', close: '.' }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '`', close: '`' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: ':', close: '.' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region'),\n            end: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion')\n        }\n    }\n};\nexport var language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    // defaultToken: 'invalid',\n    tokenPostfix: '.lexon',\n    ignoreCase: true,\n    keywords: [\n        'lexon',\n        'lex',\n        'clause',\n        'terms',\n        'contracts',\n        'may',\n        'pay',\n        'pays',\n        'appoints',\n        'into',\n        'to'\n    ],\n    typeKeywords: ['amount', 'person', 'key', 'time', 'date', 'asset', 'text'],\n    operators: [\n        'less',\n        'greater',\n        'equal',\n        'le',\n        'gt',\n        'or',\n        'and',\n        'add',\n        'added',\n        'subtract',\n        'subtracted',\n        'multiply',\n        'multiplied',\n        'times',\n        'divide',\n        'divided',\n        'is',\n        'be',\n        'certified'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // comment\n            [/^(\\s*)(comment:?(?:\\s.*|))$/, ['', 'comment']],\n            // special identifier cases\n            [\n                /\"/,\n                {\n                    token: 'identifier.quote',\n                    bracket: '@open',\n                    next: '@quoted_identifier'\n                }\n            ],\n            [\n                'LEX$',\n                {\n                    token: 'keyword',\n                    bracket: '@open',\n                    next: '@identifier_until_period'\n                }\n            ],\n            ['LEXON', { token: 'keyword', bracket: '@open', next: '@semver' }],\n            [\n                ':',\n                {\n                    token: 'delimiter',\n                    bracket: '@open',\n                    next: '@identifier_until_period'\n                }\n            ],\n            // identifiers and keywords\n            [\n                /[a-z_$][\\w$]*/,\n                {\n                    cases: {\n                        '@operators': 'operator',\n                        '@typeKeywords': 'keyword.type',\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, 'delimiter'],\n            // numbers\n            [/\\d*\\.\\d*\\.\\d*/, 'number.semver'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter']\n        ],\n        quoted_identifier: [\n            [/[^\\\\\"]+/, 'identifier'],\n            [/\"/, { token: 'identifier.quote', bracket: '@close', next: '@pop' }]\n        ],\n        space_identifier_until_period: [\n            [':', 'delimiter'],\n            [' ', { token: 'white', next: '@identifier_rest' }]\n        ],\n        identifier_until_period: [\n            { include: '@whitespace' },\n            [':', { token: 'delimiter', next: '@identifier_rest' }],\n            [/[^\\\\.]+/, 'identifier'],\n            [/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\n        ],\n        identifier_rest: [\n            [/[^\\\\.]+/, 'identifier'],\n            [/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\n        ],\n        semver: [\n            { include: '@whitespace' },\n            [':', 'delimiter'],\n            [/\\d*\\.\\d*\\.\\d*/, { token: 'number.semver', bracket: '@close', next: '@pop' }]\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, 'white']]\n    }\n};\n"]}