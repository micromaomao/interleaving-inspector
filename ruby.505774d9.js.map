{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","tokenPostfix","keywords","keywordops","builtins","declarations","linedecls","operators","token","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","next","end","for","include","$1","dodecl","switchTo","do","modifier","sstring","dstring","heredoc","interpolated","interpolated_compound","pregexp","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","qqstring","whitespace","comment"],"mappings":"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","file":"ruby.505774d9.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '#',\n        blockComment: ['=begin', '=end']\n    },\n    brackets: [\n        ['(', ')'],\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    indentationRules: {\n        increaseIndentPattern: new RegExp('^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|\\'|/).*\\\\4)*(#.*)?$'),\n        decreaseIndentPattern: new RegExp('^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)')\n    }\n};\n/*\n * Ruby language definition\n *\n * Quite a complex language due to elaborate escape sequences\n * and quoting of literate strings/regular expressions, and\n * an 'end' keyword that does not always apply to modifiers like until and while,\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\n * another statement (like 'while').\n *\n * (1) end blocks:\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\n * To do proper brace matching we do some elaborate state manipulation.\n * some examples:\n *\n *   until bla do\n *     work until tired\n *     list.each do\n *       something if test\n *     end\n *   end\n *\n * or\n *\n * if test\n *  something (if test then x end)\n *  bar if bla\n * end\n *\n * or, how about using class as a property..\n *\n * class Test\n *   def endpoint\n *     self.class.endpoint || routes\n *   end\n * end\n *\n * (2) quoting:\n * there are many kinds of strings and escape sequences. But also, one can\n * start many string-like things as '%qx' where q specifies the kind of string\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\n * some character and only another 'x' ends the sequence. Except for brackets\n * where the closing bracket ends the sequence.. and except for a nested bracket\n * inside the string like entity. Also, such strings can contain interpolated\n * ruby expressions again (and span multiple lines). Moreover, expanded\n * regular expression can also contain comments.\n */\nexport var language = {\n    tokenPostfix: '.ruby',\n    keywords: [\n        '__LINE__',\n        '__ENCODING__',\n        '__FILE__',\n        'BEGIN',\n        'END',\n        'alias',\n        'and',\n        'begin',\n        'break',\n        'case',\n        'class',\n        'def',\n        'defined?',\n        'do',\n        'else',\n        'elsif',\n        'end',\n        'ensure',\n        'for',\n        'false',\n        'if',\n        'in',\n        'module',\n        'next',\n        'nil',\n        'not',\n        'or',\n        'redo',\n        'rescue',\n        'retry',\n        'return',\n        'self',\n        'super',\n        'then',\n        'true',\n        'undef',\n        'unless',\n        'until',\n        'when',\n        'while',\n        'yield'\n    ],\n    keywordops: ['::', '..', '...', '?', ':', '=>'],\n    builtins: [\n        'require',\n        'public',\n        'private',\n        'include',\n        'extend',\n        'attr_reader',\n        'protected',\n        'private_class_method',\n        'protected_class_method',\n        'new'\n    ],\n    // these are closed by 'end' (if, while and until are handled separately)\n    declarations: [\n        'module',\n        'class',\n        'def',\n        'case',\n        'do',\n        'begin',\n        'for',\n        'if',\n        'while',\n        'until',\n        'unless'\n    ],\n    linedecls: ['def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'],\n    operators: [\n        '^',\n        '&',\n        '|',\n        '<=>',\n        '==',\n        '===',\n        '!~',\n        '=~',\n        '>',\n        '>=',\n        '<',\n        '<=',\n        '<<',\n        '>>',\n        '+',\n        '-',\n        '*',\n        '/',\n        '%',\n        '**',\n        '~',\n        '+@',\n        '-@',\n        '[]',\n        '[]=',\n        '`',\n        '+=',\n        '-=',\n        '*=',\n        '**=',\n        '/=',\n        '^=',\n        '%=',\n        '<<=',\n        '>>=',\n        '&=',\n        '&&=',\n        '||=',\n        '|='\n    ],\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' }\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n    // escape sequences\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n    decpart: /\\d(_?\\d)*/,\n    decimal: /0|@decpart/,\n    delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n    heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n    regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        // Main entry.\n        // root.<decl> where decl is the current opening declaration (like 'class')\n        root: [\n            // identifiers and keywords\n            // most complexity here is due to matching 'end' correctly with declarations.\n            // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n            [\n                /^(\\s*)([a-z_]\\w*[!?=]?)/,\n                [\n                    'white',\n                    {\n                        cases: {\n                            'for|until|while': {\n                                token: 'keyword.$2',\n                                next: '@dodecl.$2'\n                            },\n                            '@declarations': {\n                                token: 'keyword.$2',\n                                next: '@root.$2'\n                            },\n                            end: { token: 'keyword.$S2', next: '@pop' },\n                            '@keywords': 'keyword',\n                            '@builtins': 'predefined',\n                            '@default': 'identifier'\n                        }\n                    }\n                ]\n            ],\n            [\n                /[a-z_]\\w*[!?=]?/,\n                {\n                    cases: {\n                        'if|unless|while|until': {\n                            token: 'keyword.$0x',\n                            next: '@modifier.$0x'\n                        },\n                        for: { token: 'keyword.$2', next: '@dodecl.$2' },\n                        '@linedecls': { token: 'keyword.$0', next: '@root.$0' },\n                        end: { token: 'keyword.$S2', next: '@pop' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\n            [/\\$[\\w]*/, 'global.constant'],\n            [/@[\\w]*/, 'namespace.instance.identifier'],\n            [/@@[\\w]*/, 'namespace.class.identifier'],\n            // here document\n            [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            [\n                /[ \\t\\r\\n]+<<(@heredelim).*/,\n                { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }\n            ],\n            [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            // whitespace\n            { include: '@whitespace' },\n            // strings\n            [/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\n            [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\n            // % literals. For efficiency, rematch in the 'pstring' state\n            [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\n            // commands and symbols\n            [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\n            [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\n            [/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\n            [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\n            // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n            [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@keywordops': 'keyword',\n                        '@operators': 'operator',\n                        '@default': ''\n                    }\n                }\n            ],\n            [/[;,]/, 'delimiter'],\n            // numbers\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\n            [/0[bB][01](_?[01])*/, 'number.binary'],\n            [/0[dD]@decpart/, 'number'],\n            [\n                /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n                {\n                    cases: {\n                        $1: 'number.float',\n                        '@default': 'number'\n                    }\n                }\n            ]\n        ],\n        // used to not treat a 'do' as a block opener if it occurs on the same\n        // line as a 'do' statement: 'while|until|for'\n        // dodecl.<decl> where decl is the declarations started, like 'while'\n        dodecl: [\n            [/^/, { token: '', switchTo: '@root.$S2' }],\n            [\n                /[a-z_]\\w*[!?=]?/,\n                {\n                    cases: {\n                        end: { token: 'keyword.$S2', next: '@pop' },\n                        do: { token: 'keyword', switchTo: '@root.$S2' },\n                        '@linedecls': {\n                            token: '@rematch',\n                            switchTo: '@root.$S2'\n                        },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            { include: '@root' }\n        ],\n        // used to prevent potential modifiers ('if|until|while|unless') to match\n        // with 'end' keywords.\n        // modifier.<decl>x where decl is the declaration starter, like 'if'\n        modifier: [\n            [/^/, '', '@pop'],\n            [\n                /[a-z_]\\w*[!?=]?/,\n                {\n                    cases: {\n                        end: { token: 'keyword.$S2', next: '@pop' },\n                        'then|else|elsif|do': {\n                            token: 'keyword',\n                            switchTo: '@root.$S2'\n                        },\n                        '@linedecls': {\n                            token: '@rematch',\n                            switchTo: '@root.$S2'\n                        },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            { include: '@root' }\n        ],\n        // single quote strings (also used for symbols)\n        // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\n        sstring: [\n            [/[^\\\\']+/, 'string.$S2'],\n            [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.invalid'],\n            [/'/, { token: 'string.$S2.delim', next: '@pop' }]\n        ],\n        // double quoted \"string\".\n        // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n        // and delim is the ending delimiter (\" or `)\n        dstring: [\n            [/[^\\\\`\"#]+/, 'string.$S2'],\n            [/#/, 'string.$S2.escape', '@interpolated'],\n            [/\\\\$/, 'string.$S2.escape'],\n            [/@escapes/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.escape.invalid'],\n            [\n                /[`\"]/,\n                {\n                    cases: {\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\n                        '@default': 'string.$S2'\n                    }\n                }\n            ]\n        ],\n        // literal documents\n        // heredoc.<close> where close is the closing delimiter\n        heredoc: [\n            [\n                /^(\\s*)(@heredelim)$/,\n                {\n                    cases: {\n                        '$2==$S2': [\n                            'string.heredoc',\n                            { token: 'string.heredoc.delimiter', next: '@pop' }\n                        ],\n                        '@default': ['string.heredoc', 'string.heredoc']\n                    }\n                }\n            ],\n            [/.*/, 'string.heredoc']\n        ],\n        // interpolated sequence\n        interpolated: [\n            [/\\$\\w*/, 'global.constant', '@pop'],\n            [/@\\w*/, 'namespace.class.identifier', '@pop'],\n            [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\n            [\n                /[{]/,\n                {\n                    token: 'string.escape.curly',\n                    switchTo: '@interpolated_compound'\n                }\n            ],\n            ['', '', '@pop'] // just a # is interpreted as a #\n        ],\n        // any code\n        interpolated_compound: [\n            [/[}]/, { token: 'string.escape.curly', next: '@pop' }],\n            { include: '@root' }\n        ],\n        // %r quoted regexp\n        // pregexp.<open>.<close> where open/close are the open/close delimiter\n        pregexp: [\n            { include: '@whitespace' },\n            // turns out that you can quote using regex control characters, aargh!\n            // for example; %r|kgjgaj| is ok (even though | is used for alternation)\n            // so, we need to match those first\n            [\n                /[^\\(\\{\\[\\\\]/,\n                {\n                    cases: {\n                        '$#==$S3': { token: 'regexp.delim', next: '@pop' },\n                        '$#==$S2': { token: 'regexp.delim', next: '@push' },\n                        '~[)}\\\\]]': '@brackets.regexp.escape.control',\n                        '~@regexpctl': 'regexp.escape.control',\n                        '@default': 'regexp'\n                    }\n                }\n            ],\n            { include: '@regexcontrol' }\n        ],\n        // We match regular expression quite precisely\n        regexp: [\n            { include: '@regexcontrol' },\n            [/[^\\\\\\/]/, 'regexp'],\n            ['/[ixmp]*', { token: 'regexp.delim' }, '@pop']\n        ],\n        regexcontrol: [\n            [\n                /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n                [\n                    '@brackets.regexp.escape.control',\n                    'regexp.escape.control',\n                    '@brackets.regexp.escape.control'\n                ]\n            ],\n            [\n                /(\\[)(\\^?)/,\n                [\n                    '@brackets.regexp.escape.control',\n                    { token: 'regexp.escape.control', next: '@regexrange' }\n                ]\n            ],\n            [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\n            [/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\n            [/[()]/, '@brackets.regexp.escape.control'],\n            [/@regexpctl/, 'regexp.escape.control'],\n            [/\\\\$/, 'regexp.escape'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/\\\\\\./, 'regexp.invalid'],\n            [/#/, 'regexp.escape', '@interpolated']\n        ],\n        regexrange: [\n            [/-/, 'regexp.escape.control'],\n            [/\\^/, 'regexp.invalid'],\n            [/\\\\$/, 'regexp.escape'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/[^\\]]/, 'regexp'],\n            [/\\]/, '@brackets.regexp.escape.control', '@pop']\n        ],\n        regexpcomment: [\n            [/[^)]+/, 'comment'],\n            [/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\n        ],\n        // % quoted strings\n        // A bit repetitive since we need to often special case the kind of ending delimiter\n        pstring: [\n            [/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\n            [/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\n            [/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\n            [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\n            [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\n            [/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\n            [/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\n            [/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\n            [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\n            [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\n            [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\n            [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\n            [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\n            [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\n            [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\n            [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\n            [/./, { token: 'invalid', next: '@pop' }] // recover\n        ],\n        // non-expanded quoted string.\n        // qstring.<kind>.<open>.<close>\n        //  kind = q|w|s  (single quote, array, symbol)\n        //  open = open delimiter\n        //  close = close delimiter\n        qstring: [\n            [/\\\\$/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.escape'],\n            [\n                /./,\n                {\n                    cases: {\n                        '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@push' },\n                        '@default': 'string.$S2'\n                    }\n                }\n            ]\n        ],\n        // expanded quoted string.\n        // qqstring.<kind>.<open>.<close>\n        //  kind = Q|W|x  (double quote, array, command)\n        //  open = open delimiter\n        //  close = close delimiter\n        qqstring: [[/#/, 'string.$S2.escape', '@interpolated'], { include: '@qstring' }],\n        // whitespace & comments\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/^\\s*=begin\\b/, 'comment', '@comment'],\n            [/#.*$/, 'comment']\n        ],\n        comment: [\n            [/[^=]+/, 'comment'],\n            [/^\\s*=begin\\b/, 'comment.invalid'],\n            [/^\\s*=end\\b.*/, 'comment', '@pop'],\n            [/[=]/, 'comment']\n        ]\n    }\n};\n"]}