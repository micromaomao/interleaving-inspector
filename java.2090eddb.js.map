{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/java/java.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","token","include","whitespace","comment","javadoc","string"],"mappings":"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","file":"java.2090eddb.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    // the default separators except `@$`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: '<', close: '>' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\n            end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.java',\n    keywords: [\n        'abstract',\n        'continue',\n        'for',\n        'new',\n        'switch',\n        'assert',\n        'default',\n        'goto',\n        'package',\n        'synchronized',\n        'boolean',\n        'do',\n        'if',\n        'private',\n        'this',\n        'break',\n        'double',\n        'implements',\n        'protected',\n        'throw',\n        'byte',\n        'else',\n        'import',\n        'public',\n        'throws',\n        'case',\n        'enum',\n        'instanceof',\n        'return',\n        'transient',\n        'catch',\n        'extends',\n        'int',\n        'short',\n        'try',\n        'char',\n        'final',\n        'interface',\n        'static',\n        'void',\n        'class',\n        'finally',\n        'long',\n        'strictfp',\n        'volatile',\n        'const',\n        'float',\n        'native',\n        'super',\n        'while',\n        'true',\n        'false'\n    ],\n    operators: [\n        '=',\n        '>',\n        '<',\n        '!',\n        '~',\n        '?',\n        ':',\n        '==',\n        '<=',\n        '>=',\n        '!=',\n        '&&',\n        '||',\n        '++',\n        '--',\n        '+',\n        '-',\n        '*',\n        '/',\n        '&',\n        '|',\n        '^',\n        '%',\n        '<<',\n        '>>',\n        '>>>',\n        '+=',\n        '-=',\n        '*=',\n        '/=',\n        '&=',\n        '|=',\n        '^=',\n        '%=',\n        '<<=',\n        '>>=',\n        '>>>='\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    digits: /\\d+(_+\\d+)*/,\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_$][\\w$]*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }\n            ],\n            // @ annotations.\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n            // numbers\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\n            [/0(@octaldigits)[Ll]?/, 'number.octal'],\n            [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\n            [/(@digits)[fFdD]/, 'number.float'],\n            [/(@digits)[lL]?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        javadoc: [\n            [/[^\\/*]+/, 'comment.doc'],\n            // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n            [/\\/\\*/, 'comment.doc.invalid'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ]\n    }\n};\n"]}