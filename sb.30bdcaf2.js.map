{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","$2","whitespace","string"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACO,IAAIA,IAAI,GAAG;AACdC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE;AADP,GADI;AAIdC,EAAAA,QAAQ,EAAE,CACN,CAAC,GAAD,EAAM,GAAN,CADM,EAEN,CAAC,GAAD,EAAM,GAAN,CAFM,EAGN,CAAC,IAAD,EAAO,OAAP,CAHM,EAIN,CAAC,OAAD,EAAU,UAAV,CAJM,EAKN,CAAC,KAAD,EAAQ,QAAR,CALM,EAMN,CAAC,KAAD,EAAQ,QAAR,CANM,CAJI;AAYdC,EAAAA,gBAAgB,EAAE,CACd;AAAEC,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX;AAAhC,GADc,EAEd;AAAEF,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX;AAAhC,GAFc,EAGd;AAAEF,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX;AAAhC,GAHc;AAZJ,CAAX;;AAkBA,IAAIC,QAAQ,GAAG;AAClBC,EAAAA,YAAY,EAAE,EADI;AAElBC,EAAAA,YAAY,EAAE,KAFI;AAGlBC,EAAAA,UAAU,EAAE,IAHM;AAIlBR,EAAAA,QAAQ,EAAE,CACN;AAAES,IAAAA,KAAK,EAAE,iBAAT;AAA4BP,IAAAA,IAAI,EAAE,GAAlC;AAAuCC,IAAAA,KAAK,EAAE;AAA9C,GADM,EAEN;AAAEM,IAAAA,KAAK,EAAE,uBAAT;AAAkCP,IAAAA,IAAI,EAAE,GAAxC;AAA6CC,IAAAA,KAAK,EAAE;AAApD,GAFM,EAGN;AACA;AAAEM,IAAAA,KAAK,EAAE,gBAAT;AAA2BP,IAAAA,IAAI,EAAE,IAAjC;AAAuCC,IAAAA,KAAK,EAAE;AAA9C,GAJM,EAKN;AAAEM,IAAAA,KAAK,EAAE,mBAAT;AAA8BP,IAAAA,IAAI,EAAE,OAApC;AAA6CC,IAAAA,KAAK,EAAE;AAApD,GALM,EAMN;AAAEM,IAAAA,KAAK,EAAE,iBAAT;AAA4BP,IAAAA,IAAI,EAAE,KAAlC;AAAyCC,IAAAA,KAAK,EAAE;AAAhD,GANM,EAON;AAAEM,IAAAA,KAAK,EAAE,iBAAT;AAA4BP,IAAAA,IAAI,EAAE,KAAlC;AAAyCC,IAAAA,KAAK,EAAE;AAAhD,GAPM,CAJQ;AAalBO,EAAAA,QAAQ,EAAE,CACN,MADM,EAEN,QAFM,EAGN,QAHM,EAIN,OAJM,EAKN,QALM,EAMN,UANM,EAON,KAPM,EAQN,MARM,EASN,IATM,EAUN,MAVM,EAWN,KAXM,EAYN,MAZM,EAaN,IAbM,EAcN,OAdM,CAbQ;AA6BlBC,EAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,EAAuB,KAAvB,CA7BQ;AA8BlBC,EAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,IAApC,EAA0C,GAA1C,EAA+C,GAA/C,EAAoD,GAApD,EAAyD,GAAzD,EAA8D,GAA9D,CA9BO;AA+BlB;AACAC,EAAAA,UAAU,EAAE,gBAhCM;AAiClBC,EAAAA,OAAO,EAAE,mBAjCS;AAkClBC,EAAAA,OAAO,EAAE,uEAlCS;AAmClB;AACAC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CACF;AACA;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAFE,EAGF;AACA,KAAC,sBAAD,EAAyB,MAAzB,CAJE,EAKF;AACA,KACI,aADJ,EAEI;AACIC,MAAAA,KAAK,EAAE;AACH,qBAAa;AAAEV,UAAAA,KAAK,EAAE;AAAT,SADV;AAEH,sBAAc,UAFX;AAGH,oBAAY;AAHT;AADX,KAFJ,CANE,EAgBF;AACA,KACI,oBADJ,EAEI;AACIU,MAAAA,KAAK,EAAE;AACHC,QAAAA,EAAE,EAAE,CAAC,WAAD,EAAc,aAAd,CADD;AAEH,oBAAY;AAFT;AADX,KAFJ,CAjBE,EA0BF;AACA,KAAC,UAAD,EAAa,cAAb,CA3BE,EA4BF,CAAC,KAAD,EAAQ,QAAR,CA5BE,EA6BF;AACA,KAAC,UAAD,EAAa,WAAb,CA9BE,EA+BF,CACI,UADJ,EAEI;AACID,MAAAA,KAAK,EAAE;AACH,sBAAc,UADX;AAEH,oBAAY;AAFT;AADX,KAFJ,CA/BE,EAwCF;AACA,KAAC,iBAAD,EAAoB,gBAApB,CAzCE,EA0CF,CAAC,GAAD,EAAM,QAAN,EAAgB,SAAhB,CA1CE,CADC;AA6CPE,IAAAA,UAAU,EAAE,CACR,CAAC,YAAD,EAAe,EAAf,CADQ,EAER,CAAC,SAAD,EAAY,SAAZ,CAFQ,CA7CL;AAiDPC,IAAAA,MAAM,EAAE,CACJ,CAAC,SAAD,EAAY,QAAZ,CADI,EAEJ,CAAC,UAAD,EAAa,eAAb,CAFI,EAGJ,CAAC,KAAD,EAAQ,uBAAR,CAHI,EAIJ,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CAJI;AAjDD;AApCO,CAAf","file":"sb.30bdcaf2.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: \"'\"\n    },\n    brackets: [\n        ['(', ')'],\n        ['[', ']'],\n        ['If', 'EndIf'],\n        ['While', 'EndWhile'],\n        ['For', 'EndFor'],\n        ['Sub', 'EndSub']\n    ],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.sb',\n    ignoreCase: true,\n    brackets: [\n        { token: 'delimiter.array', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\n        // Special bracket statement pairs\n        { token: 'keyword.tag-if', open: 'If', close: 'EndIf' },\n        { token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },\n        { token: 'keyword.tag-for', open: 'For', close: 'EndFor' },\n        { token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' }\n    ],\n    keywords: [\n        'Else',\n        'ElseIf',\n        'EndFor',\n        'EndIf',\n        'EndSub',\n        'EndWhile',\n        'For',\n        'Goto',\n        'If',\n        'Step',\n        'Sub',\n        'Then',\n        'To',\n        'While'\n    ],\n    tagwords: ['If', 'Sub', 'While', 'For'],\n    operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n    // we include these common regular expressions\n    identifier: /[a-zA-Z_][\\w]*/,\n    symbols: /[=><:+\\-*\\/%\\.,]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // whitespace\n            { include: '@whitespace' },\n            // classes\n            [/(@identifier)(?=[.])/, 'type'],\n            // identifiers, tagwords, and keywords\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@operators': 'operator',\n                        '@default': 'variable.name'\n                    }\n                }\n            ],\n            // methods, properties, and events\n            [\n                /([.])(@identifier)/,\n                {\n                    cases: {\n                        $2: ['delimiter', 'type.member'],\n                        '@default': ''\n                    }\n                }\n            ],\n            // numbers\n            [/\\d*\\.\\d+/, 'number.float'],\n            [/\\d+/, 'number'],\n            // delimiters and operators\n            [/[()\\[\\]]/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'operator',\n                        '@default': 'delimiter'\n                    }\n                }\n            ],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/(\\').*$/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"C?/, 'string', '@pop']\n        ]\n    }\n};\n"]}