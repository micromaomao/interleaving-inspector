{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"mappings":"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","file":"pascaligo.87544d14.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['(*', '*)']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<', '>']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.pascaligo',\n    ignoreCase: true,\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    keywords: [\n        'begin',\n        'block',\n        'case',\n        'const',\n        'else',\n        'end',\n        'fail',\n        'for',\n        'from',\n        'function',\n        'if',\n        'is',\n        'nil',\n        'of',\n        'remove',\n        'return',\n        'skip',\n        'then',\n        'type',\n        'var',\n        'while',\n        'with',\n        'option',\n        'None',\n        'transaction'\n    ],\n    typeKeywords: [\n        'bool',\n        'int',\n        'list',\n        'map',\n        'nat',\n        'record',\n        'string',\n        'unit',\n        'address',\n        'map',\n        'mtz',\n        'xtz'\n    ],\n    operators: [\n        '=',\n        '>',\n        '<',\n        '<=',\n        '>=',\n        '<>',\n        ':',\n        ':=',\n        'and',\n        'mod',\n        'or',\n        '+',\n        '-',\n        '*',\n        '/',\n        '@',\n        '&',\n        '^',\n        '%'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_][\\w]*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }\n            ],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'/, 'string', '@string'],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/'/, 'string.invalid'],\n            [/\\#\\d+/, 'string']\n        ],\n        /* */\n        comment: [\n            [/[^\\(\\*]+/, 'comment'],\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n            [/\\*\\)/, 'comment', '@pop'],\n            [/\\(\\*/, 'comment']\n        ],\n        string: [\n            [/[^\\\\']+/, 'string'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\(\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ]\n    }\n};\n"]}